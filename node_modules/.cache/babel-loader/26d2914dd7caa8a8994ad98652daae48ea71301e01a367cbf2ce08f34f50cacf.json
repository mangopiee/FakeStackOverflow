{"ast":null,"code":"var _jsxFileName = \"D:\\\\pa02react-team_andi_mingrong\\\\src\\\\components\\\\allQuestions.js\";\nimport Model from '../models/model.js';\nimport AnswersPage from './answersPage.js';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst model = new Model();\nconst questions = model.getAllQstns();\nconst tags = model.getAllTags();\nclass Questions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      qid: '',\n      title: '',\n      text: '',\n      tagIds: '',\n      askedBy: '',\n      askDate: '',\n      ansIds: '',\n      views: ''\n    };\n    this.model = model;\n    this.makeTitleClickable = this.makeTitleClickable.bind(this);\n  }\n\n  //     makeTitleClickable(question){\n  //       this.props.setCurQuestion(question);\n  //       this.setState(() => ({views: question.views}));\n  //       //view ++ when clicked on the question to display the answer\n  //       this.setState((prevState) => ({ views: prevState.views + 1 }), () => {\n  //         // After the state has been updated, call updateView\n  //         this.model.updateView(question, this.state.views); // update views to the model\n  //         this.props.goAnswer();\n  //       });\n  //     }\n\n  makeTitleClickable(question) {\n    this.props.setCurQuestion(question);\n    question.views += 1;\n    this.props.goAnswer();\n  }\n  render() {\n    const questions = this.props.questions;\n    const tags = this.props.tags;\n    if (questions.length == 0) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        id: \"NotFound\",\n        children: \" No Question Founded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p1\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"number_answers\",\n            children: [question.ansIds.length, \" answers\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"views\",\n            children: [\" \", question.views, \" views\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p2\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"title\",\n            onClick: () => this.makeTitleClickable(question),\n            children: question.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tags\",\n            children: TagsComponent(question, tags)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"p3\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ask\",\n            children: [question.askedBy, \" asked \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"date\",\n            children: [\" at \", formatQuestionTime(question.askDate)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 7\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this);\n  }\n}\nexport default Questions;\nfunction TagsComponent(question, tags) {\n  const arr = [];\n  for (let i = 0; i < question.tagIds.length; i++) {\n    for (let j = 0; j < tags.length; j++) {\n      if (question.tagIds[i] === tags[j].tid) {\n        arr.push(tags[j].name);\n      }\n    }\n  }\n  const tagButtons = arr.map((tagName, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n    children: tagName\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 3\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tagButtons\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 3\n  }, this);\n}\n_c = TagsComponent;\nfunction formatQuestionTime(questionDate) {\n  const currentDate = new Date();\n  const postDate = new Date(questionDate);\n  const timeDifference = currentDate - postDate;\n\n  // Convert milliseconds to seconds, minutes, or hours\n  const secondsDifference = Math.floor(timeDifference / 1000);\n  const minutesDifference = Math.floor(secondsDifference / 60);\n  const hoursDifference = Math.floor(minutesDifference / 60);\n  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  const month = monthNames[postDate.getMonth()];\n  const date = postDate.getDate();\n  const hour = postDate.getHours();\n  const min = postDate.getMinutes();\n  const str = `${month} ${date} at ${hour.toString().padStart(2, '0')}:${min.toString().padStart(2, '0')}`;\n  const str2 = `${month} ${date}, ${postDate.getFullYear()} at ${hour.toString().padStart(2, '0')}:${min.toString().padStart(2, '0')}`;\n  if (secondsDifference < 60) {\n    return `${secondsDifference} second${secondsDifference !== 1 ? 's' : ''} ago`;\n  } else if (minutesDifference < 60) {\n    return `${minutesDifference} minute${minutesDifference !== 1 ? 's' : ''} ago`;\n  } else if (hoursDifference < 24) {\n    return `${hoursDifference} hour${hoursDifference !== 1 ? 's' : ''} ago`;\n  } else if (currentDate.getFullYear() === postDate.getFullYear()) {\n    return str;\n  } else {\n    // If more than 24 hours ago, you can display the full date or another format\n    return str2;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"TagsComponent\");","map":{"version":3,"names":["Model","AnswersPage","React","useState","jsxDEV","_jsxDEV","model","questions","getAllQstns","tags","getAllTags","Questions","Component","constructor","props","state","qid","title","text","tagIds","askedBy","askDate","ansIds","views","makeTitleClickable","bind","question","setCurQuestion","goAnswer","render","length","id","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","className","onClick","TagsComponent","formatQuestionTime","arr","i","j","tid","push","name","tagButtons","tagName","_c","questionDate","currentDate","Date","postDate","timeDifference","secondsDifference","Math","floor","minutesDifference","hoursDifference","monthNames","month","getMonth","date","getDate","hour","getHours","min","getMinutes","str","toString","padStart","str2","getFullYear","$RefreshReg$"],"sources":["D:/pa02react-team_andi_mingrong/src/components/allQuestions.js"],"sourcesContent":["import Model from '../models/model.js';\nimport AnswersPage from './answersPage.js';\nimport React, { useState } from 'react';\n\nconst model = new Model();\n\nconst questions = model.getAllQstns();\nconst tags = model.getAllTags();\n\nclass Questions extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      qid:'',\n      title:'',\n      text:'',\n      tagIds:'',\n      askedBy:'',\n      askDate:'',\n      ansIds:'',\n      views:''\n    };\n    this.model = model;\n    this.makeTitleClickable = this.makeTitleClickable.bind(this)\n  }\n\n//     makeTitleClickable(question){\n//       this.props.setCurQuestion(question);\n//       this.setState(() => ({views: question.views}));\n//       //view ++ when clicked on the question to display the answer\n//       this.setState((prevState) => ({ views: prevState.views + 1 }), () => {\n//         // After the state has been updated, call updateView\n//         this.model.updateView(question, this.state.views); // update views to the model\n//         this.props.goAnswer();\n//       });\n//     }\n\nmakeTitleClickable(question){\n  this.props.setCurQuestion(question);\n  question.views += 1;\n  this.props.goAnswer();\n\n}\nrender(){\n  const questions = this.props.questions;\n  const tags = this.props.tags;\n  \n  if(questions.length == 0){\n    return(\n      <h1 id = \"NotFound\"> No Question Founded</h1>\n    );\n  }\n  return(\n    \n    <div>\n      \n      {questions.map((question,index)=>(\n        <div className=\"question\" key={index}>\n      <div className = \"p1\">\n        <h4 className=\"number_answers\" >{question.ansIds.length} answers</h4>\n        <h4 className = \"views\"> {question.views} views</h4>\n      </div>\n  \n      <div className=\"p2\">\n        <h1 className = \"title\" onClick = {() => this.makeTitleClickable(question)}>\n          {question.title}\n        </h1>\n        <br/>\n        <div className=\"tags\">\n          {TagsComponent(question,tags)}\n        </div>\n      </div>\n      <div className=\"p3\">\n      \n        <p className=\"ask\">{question.askedBy} asked </p>\n        <p className=\"date\"> at {formatQuestionTime(question.askDate)}</p>\n      \n      </div>\n\n      <div></div>\n    </div>\n    ))}\n  </div>\n  );\n}\n  \n}\nexport default Questions;\n\nfunction TagsComponent( question, tags ) {\nconst arr = [];\n\nfor (let i = 0; i < question.tagIds.length; i++) {\n  for (let j = 0; j < tags.length; j++) {\n    if (question.tagIds[i] === tags[j].tid) {\n      arr.push(tags[j].name);\n    }\n  }\n}\n\nconst tagButtons = arr.map((tagName, index) => (\n  <button key={index}>{tagName}</button>\n));\nreturn(\n  <div>\n    {tagButtons}\n  </div>\n)\n}\n\nfunction formatQuestionTime(questionDate) {\n  const currentDate = new Date();\n  const postDate = new Date(questionDate);\n\n  const timeDifference = currentDate - postDate;\n\n  // Convert milliseconds to seconds, minutes, or hours\n  const secondsDifference = Math.floor(timeDifference / 1000);\n  const minutesDifference = Math.floor(secondsDifference / 60);\n  const hoursDifference = Math.floor(minutesDifference / 60);\n\n  const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  const month = monthNames[postDate.getMonth()];\n  const date = postDate.getDate();\n  const hour = postDate.getHours();\n  const min = postDate.getMinutes();\n  const str = `${month} ${date} at ${hour.toString().padStart(2, '0')}:${min.toString().padStart(2, '0')}`;\n  const str2 = `${month} ${date}, ${postDate.getFullYear()} at ${hour.toString().padStart(2, '0')}:${min.toString().padStart(2, '0')}`;\n\n  if (secondsDifference < 60) {\n    return `${secondsDifference} second${secondsDifference !== 1 ? 's' : ''} ago`;\n  } else if (minutesDifference < 60) {\n    return `${minutesDifference} minute${minutesDifference !== 1 ? 's' : ''} ago`;\n  } else if (hoursDifference < 24) {\n    return `${hoursDifference} hour${hoursDifference !== 1 ? 's' : ''} ago`;\n  } else if (currentDate.getFullYear() === postDate.getFullYear()) {\n    return str;\n  }else {\n    // If more than 24 hours ago, you can display the full date or another format\n    return str2;\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}