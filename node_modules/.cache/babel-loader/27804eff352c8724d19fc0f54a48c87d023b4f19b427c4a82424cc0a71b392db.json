{"ast":null,"code":"var _jsxFileName = \"D:\\\\pa02react-team_andi_mingrong\\\\src\\\\components\\\\fakestackoverflow.js\";\nimport Model from '../models/model.js';\nimport LeftMenu from './leftMenu.js';\nimport Homepage from './homepage.js';\nimport React, { useState } from 'react';\nimport Search from './searching.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet model = new Model();\nclass FakeStackOverflow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 1,\n      questions: model.getAllQstns().sort((a, b) => b.askDate - a.askDate),\n      answers: model.getAllAnswers(),\n      tags: model.getAllTags(),\n      active: null,\n      unanswer: [],\n      searching: []\n    };\n    this.updateState = this.updateState.bind(this);\n    this.updateQuestions = this.updateQuestions.bind(this);\n    this.updateAnswers = this.updateAnswers.bind(this);\n    this.updateTags = this.updateTags.bind(this);\n    this.updateSearching = this.updateSearching.bind(this);\n    this.searchByTags = this.searchByTags.bind(this);\n    this.checkHyperLink = this.checkHyperLink.bind(this);\n  }\n  updateState(newState) {\n    this.setState({\n      page: newState\n    });\n  }\n  updateQuestions(updatedQuestions) {\n    this.setState({\n      questions: updatedQuestions\n    });\n  }\n  updateAnswers(updatedAnswers) {\n    this.setState({\n      answers: updatedAnswers\n    });\n  }\n  updateTags(updatedTags) {\n    this.setState({\n      tags: updatedTags\n    });\n  }\n  updateSearching(updateSearch) {\n    this.setState({\n      searching: updateSearch\n    });\n  }\n  searchByTags(tag) {\n    var search_arr = [];\n    var tag_arr = [tag];\n    this.state.questions.forEach(question => {\n      if (this.check_exist_byTag(question, tag_arr) == true) {\n        search_arr.push(question);\n      }\n    });\n    this.setState({\n      page: 7,\n      searching: search_arr\n    });\n  }\n  check_exist_byTag(question, tag_search) {\n    const tags = this.state.tags;\n    const tag_arr = question.tagIds;\n    var tag_in_ids = [];\n    for (let i = 0; i < tag_search.length; i++) {\n      for (let j = 0; j < tags.length; j++) {\n        if (tag_search[i] == tags[j].name) {\n          tag_in_ids.push(tags[j].tid);\n        }\n      }\n    }\n    for (let i = 0; i < tag_arr.length; i++) {\n      for (let j = 0; j < tag_in_ids.length; j++) {\n        if (tag_arr[i] == tag_in_ids[j]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  checkHyperLink() {\n    const questions = this.state.questions;\n    for (const question of questions) {\n      question.hyper = 0; // 0 stand for error, 1 stand for true, 2 stand for incorrect format\n      question.hyperText = [];\n      question.hyperLinks = [];\n    }\n    const regex = /\\[([^\\]]+)\\]\\(([^\\s]+)\\)/g;\n    for (const question of questions) {\n      const matches = question.text.match(regex);\n      if (matches) {\n        for (const match of matches) {\n          question.hyper = 1;\n          const [, linkText, url] = match.match(/\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\)]+)\\)/);\n          if (url.startsWith('http://') == false && url.startsWith('https://') == false) {\n            alert('Hyperlink URL must start with \"http://\" or \"https://\"');\n            return;\n          }\n          question.hyperLinks.push(url);\n          question.hyperText.push(linkText);\n        }\n      }\n    }\n  }\n  render() {\n    this.checkHyperLink();\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"header\",\n          children: \"Fake Stack Overflow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Search, {\n          searching: this.state.searching,\n          questions: this.state.questions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main\",\n        className: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(LeftMenu, {\n          updateState: this.updateState\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Homepage, {\n          newpage: this.state.page,\n          questions: this.state.questions,\n          answers: this.state.answers,\n          tags: this.state.tags,\n          updateState: this.updateState,\n          updateQuestions: this.updateQuestions,\n          updateAnswers: this.updateAnswers,\n          updateTags: this.updateTags,\n          searchByTag: this.searchByTags,\n          searching: this.state.searching,\n          checkHyperLink: this.checkHyperLink\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n}\nexport default FakeStackOverflow;","map":{"version":3,"names":["Model","LeftMenu","Homepage","React","useState","Search","jsxDEV","_jsxDEV","Fragment","_Fragment","model","FakeStackOverflow","Component","constructor","props","state","page","questions","getAllQstns","sort","a","b","askDate","answers","getAllAnswers","tags","getAllTags","active","unanswer","searching","updateState","bind","updateQuestions","updateAnswers","updateTags","updateSearching","searchByTags","checkHyperLink","newState","setState","updatedQuestions","updatedAnswers","updatedTags","updateSearch","tag","search_arr","tag_arr","forEach","question","check_exist_byTag","push","tag_search","tagIds","tag_in_ids","i","length","j","name","tid","hyper","hyperText","hyperLinks","regex","matches","text","match","linkText","url","startsWith","alert","render","children","className","id","fileName","_jsxFileName","lineNumber","columnNumber","newpage","searchByTag"],"sources":["D:/pa02react-team_andi_mingrong/src/components/fakestackoverflow.js"],"sourcesContent":["import Model from '../models/model.js';\r\nimport LeftMenu from './leftMenu.js'\r\nimport Homepage from './homepage.js'\r\nimport React, { useState } from 'react';\r\nimport Search from './searching.js'\r\n\r\nlet model = new Model();\r\nclass FakeStackOverflow extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={\r\n      page:1,\r\n      questions:model.getAllQstns().sort((a, b) => b.askDate - a.askDate),\r\n      answers:model.getAllAnswers(),\r\n      tags:model.getAllTags(),\r\n      active:null,\r\n      unanswer:[],\r\n      searching: []\r\n    }\r\n    this.updateState = this.updateState.bind(this);\r\n    this.updateQuestions = this.updateQuestions.bind(this);\r\n    this.updateAnswers = this.updateAnswers.bind(this);\r\n    this.updateTags = this.updateTags.bind(this);\r\n    this.updateSearching = this.updateSearching.bind(this);\r\n    this.searchByTags = this.searchByTags.bind(this);\r\n    this.checkHyperLink = this.checkHyperLink.bind(this);\r\n  }\r\n  \r\n  updateState(newState){\r\n    this.setState({page:newState});\r\n  }\r\n  updateQuestions(updatedQuestions){\r\n    this.setState({ questions: updatedQuestions });\r\n  }\r\n\r\n  updateAnswers(updatedAnswers){\r\n        this.setState({answers: updatedAnswers});\r\n  }\r\n\r\n  updateTags(updatedTags){\r\n    this.setState({ tags: updatedTags });\r\n  }\r\n\r\n  updateSearching(updateSearch){\r\n    this.setState({searching:updateSearch})\r\n  }\r\n  searchByTags(tag){\r\n    var search_arr = [];\r\n    var tag_arr = [tag];\r\n    this.state.questions.forEach(question => {\r\n      if(this.check_exist_byTag(question,tag_arr) == true){\r\n        search_arr.push(question);\r\n      }\r\n    });\r\n    this.setState({page:7, searching: search_arr});\r\n  }\r\n  check_exist_byTag(question,tag_search){\r\n    const tags = this.state.tags;\r\n    const tag_arr = question.tagIds;\r\n    var tag_in_ids = [];\r\n    for(let i = 0; i<tag_search.length;i++){\r\n      \r\n      for(let j = 0;j<tags.length;j++){\r\n        \r\n        if(tag_search[i] == tags[j].name){\r\n          tag_in_ids.push(tags[j].tid);\r\n        }\r\n      }\r\n    }\r\n    \r\n    for(let i = 0; i < tag_arr.length; i++){\r\n      for(let j = 0; j< tag_in_ids.length;j++){\r\n        if(tag_arr[i] == tag_in_ids[j]){\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkHyperLink(){\r\n    const questions = this.state.questions;\r\n    for (const question of questions) {\r\n      question.hyper = 0; // 0 stand for error, 1 stand for true, 2 stand for incorrect format\r\n      question.hyperText = [];\r\n      question.hyperLinks = [];\r\n    }\r\n    const regex = /\\[([^\\]]+)\\]\\(([^\\s]+)\\)/g;\r\n    \r\n    for (const question of questions) {\r\n      const matches = question.text.match(regex);\r\n      if(matches){\r\n        for (const match of matches) {\r\n          question.hyper = 1;\r\n          const [,linkText, url] = match.match(/\\[([^\\]]+)\\]\\((https?:\\/\\/[^\\)]+)\\)/);\r\n          \r\n          if (url.startsWith('http://') == false && url.startsWith('https://') == false) {\r\n            alert('Hyperlink URL must start with \"http://\" or \"https://\"');\r\n            return;\r\n        }\r\n          question.hyperLinks.push(url);\r\n          question.hyperText.push(linkText);\r\n        }\r\n      }\r\n    }\r\n    \r\n    \r\n  }\r\n\r\n  render(){\r\n    this.checkHyperLink();\r\n    return (\r\n      <>\r\n        <div className=\"header\" >\r\n            <h1 id=\"header\">Fake Stack Overflow</h1>\r\n            <Search searching = {this.state.searching} questions = {this.state.questions} />\r\n            \r\n        </div>\r\n        <div id=\"main\" className=\"main\">\r\n          <LeftMenu  updateState = {this.updateState}/>\r\n          <Homepage newpage ={this.state.page} questions = {this.state.questions} answers = {this.state.answers} tags = {this.state.tags}\r\n          updateState = {this.updateState} updateQuestions = {this.updateQuestions} updateAnswers = {this.updateAnswers}\r\n          updateTags = {this.updateTags} searchByTag = {this.searchByTags} searching = {this.state.searching}\r\n          checkHyperLink = {this.checkHyperLink}/>\r\n        </div>\r\n        \r\n      </>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default FakeStackOverflow;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}